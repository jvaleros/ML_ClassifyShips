# -*- coding: utf-8 -*-
"""CNN features into SVM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19UAGH4W3-1vtuONZZ8iTuCB5LHLxLEIU
"""

import json, itertools, numpy as np, matplotlib.pyplot as plt, pandas as pd

from sklearn import svm
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, accuracy_score

from keras.applications.vgg19 import VGG19
from keras.preprocessing import image
from keras.applications.vgg19 import preprocess_input
from keras.models import Model
from google.colab import drive

drive.mount('/content/drive')
file = open('/content/drive/MyDrive/shipsnet.json')
data = json.load(file)
file.close()

base_model = VGG19(weights="imagenet", include_top=False,input_shape=(80,80,3))
model = Model(inputs=base_model.input,outputs=base_model.get_layer('block4_pool').output)

Shipsnet= pd.DataFrame(data)
X = np.asarray(data['data']).astype('uint8')
Y = data['labels'] 

X = X / 255.
X = X.reshape([-1, 3, 80, 80]).transpose([0,2,3,1])

X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size = 0.3)

#add noise to training data 
#Comment out these lines to compare between noise and no noise
from skimage.util import random_noise
X_train = random_noise(X_train, mode='gaussian', var=0.05**2)
X_train = (255*X_train).astype(np.uint8)
#End

#extract features from testing and training data
featuresTrain = model.predict(X_train)
featuresTest = model.predict(X_test)
featuresTrain = featuresTrain.reshape((featuresTrain.shape[0], 5 * 5 * 512))
featuresTest = featuresTest.reshape((featuresTest.shape[0], 5 * 5 * 512))

#Testing various models with hyperparameters
clf1 = svm.SVC()
clf1.fit(featuresTrain, Y_train)

y_predC1 = clf1.predict(featuresTest)
print('Accuracy:' + str(accuracy_score(Y_test, y_predC1)))
print('Base Parameters CNN: ' + classification_report(Y_test, y_predC1))

#Changing C .7
clf2 = svm.SVC(C=10)
clf2.fit(featuresTrain, Y_train)

y_predC2 = clf2.predict(featuresTest)
print('Accuracy:' + str(accuracy_score(Y_test, y_predC2)))
print('Base Parameters CNN C=10: ' + classification_report(Y_test, y_predC2))

#Changing C .3
clf3 = svm.SVC(C=100)
clf3.fit(featuresTrain, Y_train)

y_predC3 = clf3.predict(featuresTest)
print('Accuracy:' + str(accuracy_score(Y_test, y_predC3)))
print('Base Parameters CNN C=100: ' + classification_report(Y_test, y_predC3))

#Changing C .1
clf4 = svm.SVC(C=.1)
clf4.fit(featuresTrain, Y_train)

y_predC4 = clf4.predict(featuresTest)
print('Accuracy:' + str(accuracy_score(Y_test, y_predC4)))
print('Base Parameters CNN and C=.1: ' + classification_report(Y_test, y_predC4))

#Changing C .01
clf8 = svm.SVC(C=.01)
clf8.fit(featuresTrain, Y_train)

y_predC8 = clf8.predict(featuresTest)
print('Accuracy:' + str(accuracy_score(Y_test, y_predC8)))
print('Base Parameters CNN and C=.01: ' + classification_report(Y_test, y_predC8))

#Changing kernel 'poly'
clf5 = svm.SVC(kernel='poly')
clf5.fit(featuresTrain, Y_train)

y_predC5 = clf5.predict(featuresTest)
print('Accuracy:' + str(accuracy_score(Y_test, y_predC5)))
print('Base Parameters CNN and Kernel= poly : ' + classification_report(Y_test, y_predC5))

#Changing kernel 'sigmoid'
clf6 = svm.SVC(kernel='sigmoid')
clf6.fit(featuresTrain, Y_train)

y_predC6 = clf6.predict(featuresTest)
print('Accuracy:' + str(accuracy_score(Y_test, y_predC6)))
print('Base Parameters CNN and Kernel= sigmoid : ' + classification_report(Y_test, y_predC6))

#Changing kernel 'linear'
clf7 = svm.SVC(kernel='linear')
clf7.fit(featuresTrain, Y_train)

y_predC7 = clf7.predict(featuresTest)
print('Accuracy:' + str(accuracy_score(Y_test, y_predC7)))
print('Base Parameters CNN Kernel= linear : ' + classification_report(Y_test, y_predC7))